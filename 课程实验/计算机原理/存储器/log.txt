User Text Segment [00400000]..[00440000]

[00400000] 8fa40000  lw $4, 0($29)            ; 183: lw $a0 0($sp) # argc 

[00400004] 27a50004  addiu $5, $29, 4         ; 184: addiu $a1 $sp 4 # argv
 
[00400008] 24a60004  addiu $6, $5, 4          ; 185: addiu $a2 $a1 4 # envp 

[0040000c] 00041080  sll $2, $4, 2            ; 186: sll $v0 $a0 2
 
[00400010] 00c23021  addu $6, $6, $2          ; 187: addu $a2 $a2 $v0
 
[00400014] 0c000000  jal 0x00000000 [main]    ; 188: jal main
 
[00400018] 00000000  nop                      ; 189: nop 

[0040001c] 3402000a  ori $2, $0, 10           ; 191: li $v0 10 

[00400020] 0000000c  syscall                  ; 192: syscall # syscall 10 (exit)
 
[00400024] 00000827  nor $1, $0, $0           ; 2: nor $1, $0,$0; #$1=FFFF_FFFF
 
[00400028] 0001102b  sltu $2, $0, $1          ; 3: sltu $2, $0, $1; #$2=0000_0001 

[0040002c] 00421820  add $3, $2, $2           ; 4: add $3, $2, $2; #$3=0000_0002 

[00400030] 00622020  add $4, $3, $2           ; 5: add $4, $3, $2; #$4=0000_0003 

[00400034] 00832820  add $5, $4, $3           ; 6: add $5, $4, $3; #$5=0000_0005
 
[00400038] 00a33020  add $6, $5, $3           ; 7: add $6, $5, $3; #$6=0000_0007 

[0040003c] 00463804  sllv $7, $6, $2          ; 8: sllv $7, $6, $2; #$7=0000_000E 

[00400040] 00a64820  add $9, $5, $6           ; 9: add $9, $5, $6; #$9=0000_000C 

[00400044] 01264004  sllv $8, $6, $9          ; 10: sllv $8, $6, $9; #$8=0000_7000 

[00400048] 00284826  xor $9, $1, $8           ; 11: xor $9, $1, $8; #$9=FFFF_8FFF 

[0040004c] 01215020  add $10, $9, $1          ; 12: add $10, $9, $1; #$10=FFFF_8FFE 

[00400050] 01075822  sub $11, $8, $7          ; 13: sub $11, $8, $7; #$11=0000_6FF2
 
[00400054] 00e86022  sub $12, $7, $8          ; 14: sub $12, $7, $8; #$12=FFFF_900E 

[00400058] 012c6824  and $13, $9, $12         ; 15: and $13, $9, $12; #$13=FFFF_800E 

[0040005c] 012c7025  or $14, $9, $12          ; 16: or $14, $9, $12; #$14=FFFF_9FFF 


[00400060] 00c77825  or $15, $6, $7           ; 17: or $15, $6, $7; #$15=0000_000F 

[00400064] 00c78027  nor $16, $6, $7          ; 18: nor $16, $6, $7; #$16=FFFF_FFF0 

[00400068] 00e38820  add $17, $7, $3          ; 19: add $17, $7, $3; #$17=0000_0010 

[0040006c] 02289004  sllv $18, $8, $17        ; 20: sllv $18, $8, $17; #$18=7000_0000 

[00400070] 02239804  sllv $19, $3, $17        ; 21: sllv $19, $3, $17; #$19=0002_0000 

[00400074] 00f3a004  sllv $20, $19, $7        ; 22: sllv $20, $19, $7; #$20=8000_0000 

[00400078] 0281a820  add $21, $20, $1         ; 23: add $21, $20, $1; #$21=7FFF_FFFF 

[0040007c] 0255b025  or $22, $18, $21         ; 24: or $22, $18, $21; #$22=7FFF_FFFF 

[00400080] 0296b820  add $23, $20, $22        ; 25: add $23, $20, $22; #$23=FFFF_FFFF
 
[00400084] 0296c022  sub $24, $20, $22        ; 26: sub $24, $20, $22; #$24=0000_0001
 
[00400088] 02d4c822  sub $25, $22, $20        ; 27: sub $25, $22, $20; #$25=FFFF_FFFF 

[0040008c] 0241d026  xor $26, $18, $1         ; 28: xor $26, $18, $1; #$26=8FFF_FFFF 

[00400090] 02d4d82b  sltu $27, $22, $20       ; 29: sltu $27, $22, $20; #$27=0000_0001 

[00400094] 0354e02b  sltu $28, $26, $20       ; 30: sltu $28, $26, $20; #$28=0000_0000 

[00400098] 02c2e820  add $29, $22, $2         ; 31: add $29, $22, $2; #$29=8000_0000 

[0040009c] 0282f022  sub $30, $20, $2         ; 32: sub $30, $20, $2; #$30=7FFF_FFFF 

[004000a0] 017af820  add $31, $11, $26        ; 33: add $31, $11, $26; #$30=9000_6FF1

 

Kernel Text Segment [80000000]..[80010000]

[80000180] 0001d821  addu $27, $0, $1         ; 90: move $k1 $at # Save $at 
[80000184] 3c019000  lui $1, -28672           ; 92: sw $v0 s1 # Not 
re-entrant and we can't trust $sp 
[80000188] ac220200  sw $2, 512($1)           
[8000018c] 3c019000  lui $1, -28672           ; 93: sw $a0 s2 # But we need to use these registers 
[80000190] ac240204  sw $4, 516($1)           
[80000194] 401a6800  mfc0 $26, $13            ; 95: mfc0 $k0 $13 # Cause register 
[80000198] 001a2082  srl $4, $26, 2           ; 96: srl $a0 $k0 2 # Extract ExcCode Field 
[8000019c] 3084001f  andi $4, $4, 31          ; 97: andi $a0 $a0 0x1f 
[800001a0] 34020004  ori $2, $0, 4            ; 101: li $v0 4 # syscall 4 (print_str) 
[800001a4] 3c049000  lui $4, -28672 [__m1_]   ; 102: la $a0 __m1_ 
[800001a8] 0000000c  syscall                  ; 103: syscall 
[800001ac] 34020001  ori $2, $0, 1            ; 105: li $v0 1 # syscall 1 (print_int) 
[800001b0] 001a2082  srl $4, $26, 2           ; 106: srl $a0 $k0 2 # Extract ExcCode Field 
[800001b4] 3084001f  andi $4, $4, 31          ; 107: andi $a0 $a0 0x1f 
[800001b8] 0000000c  syscall                  ; 108: syscall 
[800001bc] 34020004  ori $2, $0, 4            ; 110: li $v0 4 # syscall 4 (print_str) 
[800001c0] 3344003c  andi $4, $26, 60         ; 111: andi $a0 $k0 0x3c 
[800001c4] 3c019000  lui $1, -28672           ; 112: lw $a0 __excp($a0) 
[800001c8] 00240821  addu $1, $1, $4          
[800001cc] 8c240180  lw $4, 384($1)           
[800001d0] 00000000  nop                      ; 113: nop 
[800001d4] 0000000c  syscall                  ; 114: syscall 
[800001d8] 34010018  ori $1, $0, 24           ; 116: bne $k0 0x18 ok_pc # Bad PC exception requires special checks 
[800001dc] 143a0008  bne $1, $26, 32 [ok_pc-0x800001dc] 
[800001e0] 00000000  nop                      ; 117: nop 
[800001e4] 40047000  mfc0 $4, $14             ; 119: mfc0 $a0 $14 # EPC 
[800001e8] 30840003  andi $4, $4, 3           ; 120: andi $a0 $a0 0x3 # Is EPC word-aligned? 
[800001ec] 10040004  beq $0, $4, 16 [ok_pc-0x800001ec]
[800001f0] 00000000  nop                      ; 122: nop 
[800001f4] 3402000a  ori $2, $0, 10           ; 124: li $v0 10 # Exit on really bad PC 
[800001f8] 0000000c  syscall                  ; 125: syscall 
[800001fc] 34020004  ori $2, $0, 4            ; 128: li $v0 4 # syscall 4 (print_str) 
[80000200] 3c019000  lui $1, -28672 [__m2_]   ; 129: la $a0 __m2_ 
[80000204] 3424000d  ori $4, $1, 13 [__m2_]   
[80000208] 0000000c  syscall                  ; 130: syscall 
[8000020c] 001a2082  srl $4, $26, 2           ; 132: srl $a0 $k0 2 # Extract ExcCode Field 
[80000210] 3084001f  andi $4, $4, 31          ; 133: andi $a0 $a0 0x1f 
[80000214] 14040002  bne $0, $4, 8 [ret-0x80000214]; 134: bne $a0 0 ret # 0 means exception was an interrupt 
[80000218] 00000000  nop                      ; 135: nop 
[8000021c] 401a7000  mfc0 $26, $14            ; 145: mfc0 $k0 $14 # Bump EPC register 
[80000220] 275a0004  addiu $26, $26, 4        ; 146: addiu $k0 $k0 4 # Skip faulting instruction 
[80000224] 409a7000  mtc0 $26, $14            ; 148: mtc0 $k0 $14 
[80000228] 3c019000  lui $1, -28672           ; 153: lw $v0 s1 # Restore other registers 
[8000022c] 8c220200  lw $2, 512($1)           
[80000230] 3c019000  lui $1, -28672           ; 154: lw $a0 s2 
[80000234] 8c240204  lw $4, 516($1)           
[80000238] 001b0821  addu $1, $0, $27         ; 157: move $at $k1 # Restore $at 
[8000023c] 40806800  mtc0 $0, $13             ; 160: mtc0 $0 $13 # Clear Cause register 
[80000240] 401a6000  mfc0 $26, $12            ; 162: mfc0 $k0 $12 # Set Status register 
[80000244] 375a0001  ori $26, $26, 1          ; 163: ori $k0 0x1 # Interrupts enabled 
[80000248] 409a6000  mtc0 $26, $12            ; 164: mtc0 $k0 $12 
[8000024c] 42000018  eret                     ; 167: eret 


